{"entries":[{"timestamp":1756149429915,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":204,"length1":35,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1756151170115,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":204,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1756151177621,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":157,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":28,"diffs":[[1,"    \"name\": \"spill\",\n"]]},{"start1":68,"length1":44,"diffs":[[1,"        \"device\": \"*\"\n"]]},{"start1":175,"length1":49,"diffs":[[1,"        \"assets.json\"\n"]]},{"start1":204,"length1":79,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"kapakaigames.ts","value":"/**\n * Kapakai Games - Command Generation and Data Reception for ESP32\n */\n//% weight=100 color=#0fbc23 icon=\"\\uf1aa\"\nnamespace kapakaigames {\n    let lightValue: number = 0\n    let pirValue: boolean = false\n    let waterValue: number = 0\n\n    /**\n     * Define sensor to affect game property\n     * @param sensor sensor to use\n     * @param property game property to affect\n     */\n    //% block=\"set %property to be affected by %sensor\"\n    export function setSensorEffect(sensor: Sensor, property: GameProperty): string {\n        return \"SET_SENSOR_EFFECT:\" + sensor + \":\" + property\n    }\n\n    /**\n     * Available sensors\n     */\n    export enum Sensor {\n        LIGHT,\n        PIR,\n        WATER,\n    }\n\n    /**\n     * Available game properties\n     */\n    export enum GameProperty {\n        SPEED,\n        SCORE,\n        BRIGHTNESS,\n    }\n\n    /**\n     * Turn on the LED\n     */\n    //% block=\"turn on LED\"\n    export function turnOnLED(): string {\n        return \"TURN_ON_LED\"\n    }\n\n    /**\n     * Turn off the LED\n     */\n    //% block=\"turn off LED\"\n    export function turnOffLED(): string {\n        return \"TURN_OFF_LED\"\n    }\n\n    /**\n     * Turn on the Laser\n     */\n    //% block=\"turn on Laser\"\n    export function turnOnLaser(): string {\n        return \"TURN_ON_LASER\"\n    }\n\n    /**\n     * Turn off the Laser\n     */\n    //% block=\"turn off Laser\"\n    export function turnOffLaser(): string {\n        return \"TURN_OFF_LASER\"\n    }\n\n    /**\n     * Open the door\n     */\n    //% block=\"open the door\"\n    export function openTheDoor(): string {\n        return \"OPEN_THE_DOOR\"\n    }\n\n    /**\n     * Close the door\n     */\n    //% block=\"close the door\"\n    export function closeTheDoor(): string {\n        return \"CLOSE_THE_DOOR\"\n    }\n\n    /**\n     * Open the window\n     */\n    //% block=\"open the window\"\n    export function openTheWindow(): string {\n        return \"OPEN_THE_WINDOW\"\n    }\n\n    /**\n     * Close the window\n     */\n    //% block=\"close the window\"\n    export function closeTheWindow(): string {\n        return \"CLOSE_THE_WINDOW\"\n    }\n\n    /**\n     * Broadcast command to microbit\n     * @param command command to send\n     */\n    //% block=\"broadcast command %command\"\n    export function broadcastCommand(command: string): void {\n        radio.sendString(command)\n    }\n\n    /**\n     * On data received from microbit\n     * @param handler data handler\n     */\n    //% block=\"on data received\"\n    export function onDataReceived(handler: (light: number, pir: boolean, water: number) => void): void {\n        radio.onReceivedString(function (receivedString: string) {\n            let data = receivedString.split(\":\")\n            if (data.length == 3) {\n                lightValue = parseInt(data[0])\n                pirValue = data[1] == \"true\"\n                waterValue = parseInt(data[2])\n                handler(lightValue, pirValue, waterValue)\n            }\n        })\n    }\n\n    /**\n     * Get light sensor value\n     */\n    //% block=\"light value\"\n    export function getLightValue(): number {\n        return lightValue\n    }\n\n    /**\n     * Get PIR sensor value\n     */\n    //% block=\"PIR value\"\n    export function getPIRValue(): boolean {\n        return pirValue\n    }\n\n    /**\n     * Get water sensor value\n     */\n    //% block=\"water value\"\n    export function getWaterValue(): number {\n        return waterValue\n    }\n}\n"}]}],"snapshots":[{"timestamp":1756149429914,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>","main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"spill\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1756151263996,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"\n","README.md":" ","assets.json":"","kapakaigames.ts":"/**\n * Kapakai Games - Command Generation and Data Reception for ESP32\n */\n//% weight=100 color=#0fbc23 icon=\"\\uf1aa\"\nnamespace kapakaigames {\n    let lightValue: number = 0\n    let pirValue: boolean = false\n    let waterValue: number = 0\n\n    /**\n     * Define sensor to affect game property\n     * @param sensor sensor to use\n     * @param property game property to affect\n     */\n    //% block=\"set %property to be affected by %sensor\"\n    export function setSensorEffect(sensor: Sensor, property: GameProperty): string {\n        return \"SET_SENSOR_EFFECT:\" + sensor + \":\" + property\n    }\n\n    /**\n     * Available sensors\n     */\n    export enum Sensor {\n        LIGHT,\n        PIR,\n        WATER,\n    }\n\n    /**\n     * Available game properties\n     */\n    export enum GameProperty {\n        SPEED,\n        SCORE,\n        BRIGHTNESS,\n    }\n\n    /**\n     * Turn on the LED\n     */\n    //% block=\"turn on LED\"\n    export function turnOnLED(): string {\n        return \"TURN_ON_LED\"\n    }\n\n    /**\n     * Turn off the LED\n     */\n    //% block=\"turn off LED\"\n    export function turnOffLED(): string {\n        return \"TURN_OFF_LED\"\n    }\n\n    /**\n     * Turn on the Laser\n     */\n    //% block=\"turn on Laser\"\n    export function turnOnLaser(): string {\n        return \"TURN_ON_LASER\"\n    }\n\n    /**\n     * Turn off the Laser\n     */\n    //% block=\"turn off Laser\"\n    export function turnOffLaser(): string {\n        return \"TURN_OFF_LASER\"\n    }\n\n    /**\n     * Open the door\n     */\n    //% block=\"open the door\"\n    export function openTheDoor(): string {\n        return \"OPEN_THE_DOOR\"\n    }\n\n    /**\n     * Close the door\n     */\n    //% block=\"close the door\"\n    export function closeTheDoor(): string {\n        return \"CLOSE_THE_DOOR\"\n    }\n\n    /**\n     * Open the window\n     */\n    //% block=\"open the window\"\n    export function openTheWindow(): string {\n        return \"OPEN_THE_WINDOW\"\n    }\n\n    /**\n     * Close the window\n     */\n    //% block=\"close the window\"\n    export function closeTheWindow(): string {\n        return \"CLOSE_THE_WINDOW\"\n    }\n\n    /**\n     * Broadcast command to microbit\n     * @param command command to send\n     */\n    //% block=\"broadcast command %command\"\n    export function broadcastCommand(command: string): void {\n        radio.sendString(command)\n    }\n\n    /**\n     * On data received from microbit\n     * @param handler data handler\n     */\n    //% block=\"on data received\"\n    export function onDataReceived(handler: (light: number, pir: boolean, water: number) => void): void {\n        radio.onReceivedString(function (receivedString: string) {\n            let data = receivedString.split(\":\")\n            if (data.length == 3) {\n                lightValue = parseInt(data[0])\n                pirValue = data[1] == \"true\"\n                waterValue = parseInt(data[2])\n                handler(lightValue, pirValue, waterValue)\n            }\n        })\n    }\n\n    /**\n     * Get light sensor value\n     */\n    //% block=\"light value\"\n    export function getLightValue(): number {\n        return lightValue\n    }\n\n    /**\n     * Get PIR sensor value\n     */\n    //% block=\"PIR value\"\n    export function getPIRValue(): boolean {\n        return pirValue\n    }\n\n    /**\n     * Get water sensor value\n     */\n    //% block=\"water value\"\n    export function getWaterValue(): number {\n        return waterValue\n    }\n}\n","pxt.json":"{\n    \"name\": \"spill\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"kapakaigames.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1756151452318}